{"ast":null,"code":"var _jsxFileName = \"/Users/valentinflausse/Dossierarcherie/commande-app/src/components/CSVImporter.jsx\";\nimport React from 'react';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CSVImporter({\n  onDataLoaded\n}) {\n  const handleFileChange = e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      complete: function (results) {\n        const produits = results.data.map(row => {\n          var _row$NoDArticle, _row$Titre, _row$Brand, _row$Prix;\n          return {\n            reference: (_row$NoDArticle = row['No. d\\'article']) === null || _row$NoDArticle === void 0 ? void 0 : _row$NoDArticle.trim(),\n            titre: (_row$Titre = row['Titre']) === null || _row$Titre === void 0 ? void 0 : _row$Titre.trim(),\n            brand: (_row$Brand = row['Brand']) === null || _row$Brand === void 0 ? void 0 : _row$Brand.trim(),\n            prix: parseFloat((_row$Prix = row['Prix']) === null || _row$Prix === void 0 ? void 0 : _row$Prix.replace('€', '').replace(',', '.')) || 0,\n            quantite: parseInt(row['Qté.']) || 0\n          };\n        }).filter(p => p.reference && !isNaN(p.prix));\n        onDataLoaded(produits);\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mb-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"block font-medium mb-2\",\n      children: \"Importer un fichier CSV :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_c = CSVImporter;\nvar _c;\n$RefreshReg$(_c, \"CSVImporter\");","map":{"version":3,"names":["React","Papa","jsxDEV","_jsxDEV","CSVImporter","onDataLoaded","handleFileChange","e","file","target","files","parse","header","skipEmptyLines","complete","results","produits","data","map","row","_row$NoDArticle","_row$Titre","_row$Brand","_row$Prix","reference","trim","titre","brand","prix","parseFloat","replace","quantite","parseInt","filter","p","isNaN","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","_c","$RefreshReg$"],"sources":["/Users/valentinflausse/Dossierarcherie/commande-app/src/components/CSVImporter.jsx"],"sourcesContent":["import React from 'react';\nimport Papa from 'papaparse';\n\nexport default function CSVImporter({ onDataLoaded }) {\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      complete: function (results) {\n        const produits = results.data.map(row => ({\n          reference: row['No. d\\'article']?.trim(),\n          titre: row['Titre']?.trim(),\n          brand: row['Brand']?.trim(),\n          prix: parseFloat(row['Prix']?.replace('€', '').replace(',', '.')) || 0,\n          quantite: parseInt(row['Qté.']) || 0,\n        })).filter(p => p.reference && !isNaN(p.prix));\n\n        onDataLoaded(produits);\n      },\n    });\n  };\n\n  return (\n    <div className=\"mb-4\">\n      <label className=\"block font-medium mb-2\">Importer un fichier CSV :</label>\n      <input type=\"file\" accept=\".csv\" onChange={handleFileChange} />\n    </div>\n  );\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,eAAe,SAASC,WAAWA,CAAC;EAAEC;AAAa,CAAC,EAAE;EACpD,MAAMC,gBAAgB,GAAIC,CAAC,IAAK;IAC9B,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9B,IAAI,CAACF,IAAI,EAAE;IAEXP,IAAI,CAACU,KAAK,CAACH,IAAI,EAAE;MACfI,MAAM,EAAE,IAAI;MACZC,cAAc,EAAE,IAAI;MACpBC,QAAQ,EAAE,SAAAA,CAAUC,OAAO,EAAE;QAC3B,MAAMC,QAAQ,GAAGD,OAAO,CAACE,IAAI,CAACC,GAAG,CAACC,GAAG;UAAA,IAAAC,eAAA,EAAAC,UAAA,EAAAC,UAAA,EAAAC,SAAA;UAAA,OAAK;YACxCC,SAAS,GAAAJ,eAAA,GAAED,GAAG,CAAC,gBAAgB,CAAC,cAAAC,eAAA,uBAArBA,eAAA,CAAuBK,IAAI,CAAC,CAAC;YACxCC,KAAK,GAAAL,UAAA,GAAEF,GAAG,CAAC,OAAO,CAAC,cAAAE,UAAA,uBAAZA,UAAA,CAAcI,IAAI,CAAC,CAAC;YAC3BE,KAAK,GAAAL,UAAA,GAAEH,GAAG,CAAC,OAAO,CAAC,cAAAG,UAAA,uBAAZA,UAAA,CAAcG,IAAI,CAAC,CAAC;YAC3BG,IAAI,EAAEC,UAAU,EAAAN,SAAA,GAACJ,GAAG,CAAC,MAAM,CAAC,cAAAI,SAAA,uBAAXA,SAAA,CAAaO,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC;YACtEC,QAAQ,EAAEC,QAAQ,CAACb,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI;UACrC,CAAC;QAAA,CAAC,CAAC,CAACc,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACV,SAAS,IAAI,CAACW,KAAK,CAACD,CAAC,CAACN,IAAI,CAAC,CAAC;QAE9CvB,YAAY,CAACW,QAAQ,CAAC;MACxB;IACF,CAAC,CAAC;EACJ,CAAC;EAED,oBACEb,OAAA;IAAKiC,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBlC,OAAA;MAAOiC,SAAS,EAAC,wBAAwB;MAAAC,QAAA,EAAC;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAC3EtC,OAAA;MAAOuC,IAAI,EAAC,MAAM;MAACC,MAAM,EAAC,MAAM;MAACC,QAAQ,EAAEtC;IAAiB;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5D,CAAC;AAEV;AAACI,EAAA,GA5BuBzC,WAAW;AAAA,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}